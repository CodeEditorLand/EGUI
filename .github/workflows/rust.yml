on: [push, pull_request]

name: CI

env:
  # web_sys_unstable_apis is required to enable the web_sys clipboard API which eframe web uses,
  # as well as by the wasm32-backend of the wgpu crate.
  # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
  # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html
  RUSTFLAGS: --cfg=web_sys_unstable_apis -D warnings
  RUSTDOCFLAGS: -D warnings

jobs:
  tests:
    name: Tests
    strategy:
      fail-fast: false
      matrix:
        rust_version: [1.65.0, stable, nightly]
        platform:
          - { target: x86_64-pc-windows-msvc, os: windows-latest }
          - { target: i686-pc-windows-msvc, os: windows-latest }
          - { target: i686-pc-windows-msvc, os: windows-latest }
          - { target: i686-pc-windows-msvc, os: windows-latest }
          - {
              target: x86_64-pc-windows-gnu,
              os: windows-latest,
              host: -x86_64-pc-windows-gnu,
            }
          - {
              target: i686-pc-windows-gnu,
              os: windows-latest,
              host: -i686-pc-windows-gnu,
            }
          # - { target: i686-unknown-linux-gnu,   os: ubuntu-latest,   }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest }
          # - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest, options: --no-default-features, features: "egl,wayland,x11" }
          # - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest, options: --no-default-features, features: "egl,wayland" }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest }
          # - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest, options: --no-default-features, features: glx }
          # - { target: aarch64-linux-android,    os: ubuntu-latest, cmd: 'apk --'   }
          - { target: x86_64-apple-darwin, os: macos-latest }
          # We don't support ios for now.
          # - { target: x86_64-apple-ios,         os: macos-latest,    }
          # - { target: aarch64-apple-ios,        os: macos-latest,    }

    env:
      RUST_BACKTRACE: 1
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: "-C debuginfo=0"
      OPTIONS: ${{ matrix.platform.options }}
      CMD: ${{ matrix.platform.cmd }}
      FEATURES: ${{ format(',{0}', matrix.platform.features ) }}
      RUSTDOCFLAGS: -D warnings

    runs-on: ${{ matrix.platform.os }}
    steps:
      - uses: actions/checkout@v1
      # Used to cache cargo-web
      - name: Cache cargo folder
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: ${{ matrix.platform.target }}-cargo-${{ matrix.rust_version }}

      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust_version }}${{ matrix.platform.host }}
          targets: ${{ matrix.platform.target }}
          components: clippy

        # We need those for examples.
      - name: Install GCC Multilib
        if: (matrix.platform.os == 'ubuntu-latest') && contains(matrix.platform.target, 'i686')
        run: sudo apt-get update && sudo apt-get install gcc-multilib

      - name: Install Gtk (ubuntu only)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev

      - name: Install Core (windows only)
        if: matrix.platform.os == 'windows-latest'
        run: rustup target add ${{ matrix.platform.target }}

      - name: Install cargo-apk
        if: contains(matrix.platform.target, 'android')
        run: cargo +stable install cargo-apk

      - name: Build tests (eframe_tao)
        shell: bash
        run: cargo $CMD test -p eframe_tao --no-run --verbose --target ${{ matrix.platform.target }} $OPTIONS --features $FEATURES
      - name: Build tests (egui_glow_tao)
        shell: bash
        run: cargo $CMD test -p egui_glow_tao --no-run --verbose --target ${{ matrix.platform.target }} $OPTIONS --features $FEATURES
      - name: Build tests (egui-tao)
        shell: bash
        run: cargo $CMD test -p egui-tao --no-run --verbose --target ${{ matrix.platform.target }} $OPTIONS --features $FEATURES
      - name: Run tests
        shell: bash
        if: (
          !contains(matrix.platform.target, 'android') &&
          !contains(matrix.platform.target, 'ios') &&
          !contains(matrix.platform.target, 'wasm32'))
        run: cargo test --verbose --target ${{ matrix.platform.target }} $OPTIONS --features $FEATURES

      - name: Check documentation
        shell: bash
        run: cargo doc --no-deps --target ${{ matrix.platform.target }} $OPTIONS --features $FEATURES --document-private-items

      - name: Lint with clippy
        shell: bash
        if: (matrix.rust_version == '1.65.0') && !contains(matrix.platform.options, '--no-default-features')
        run: cargo clippy --workspace --all-targets --target ${{ matrix.platform.target }} $OPTIONS --features $FEATURES -- -Dwarnings
